/**
 * 🎯 Webview 打包脚本
 * 
 * 用途：将新架构的 9 个 ES6 模块打包成单个 bundle.js
 * - 包含本地 elk.bundled.js
 * - 支持 CSP nonce
 * - 生成 sourcemap 用于调试
 */

const esbuild = require('esbuild');
const path = require('path');
const fs = require('fs');

const MEDIA_DIR = path.resolve(__dirname, '../media/filetree-blueprint');
const OUT_DIR = path.join(MEDIA_DIR, 'dist');
const ENTRY = path.join(MEDIA_DIR, 'graphView-slim.js');

async function buildBundle() {
  console.log('🚀 开始打包 Webview 代码...');
  
  // 确保输出目录存在
  if (!fs.existsSync(OUT_DIR)) {
    fs.mkdirSync(OUT_DIR, { recursive: true });
  }

  try {
    const result = await esbuild.build({
      entryPoints: [ENTRY],
      bundle: true,
      outfile: path.join(OUT_DIR, 'bundle.js'),
      format: 'iife', // 立即执行函数，适合浏览器环境
      platform: 'browser',
      target: ['es2020'],
      sourcemap: true,
      minify: true, // 生产环境压缩
      treeShaking: true,
      metafile: true, // 生成元数据用于分析
      logLevel: 'info',
      banner: {
        js: '// 🎨 AI Explorer - FileTree Blueprint Webview Bundle\n// Generated by esbuild\n'
      }
    });

    // 输出打包信息
    if (result.metafile) {
      const stats = await esbuild.analyzeMetafile(result.metafile, {
        verbose: false
      });
      console.log('\n📊 打包分析:\n' + stats);
    }

    // 检查文件大小
    const bundlePath = path.join(OUT_DIR, 'bundle.js');
    const stats = fs.statSync(bundlePath);
    const sizeKB = (stats.size / 1024).toFixed(2);
    
    console.log(`\n✅ 打包成功!`);
    console.log(`   📦 输出文件: ${bundlePath}`);
    console.log(`   📏 文件大小: ${sizeKB} KB`);
    
    // 警告：如果文件过大
    if (stats.size > 500 * 1024) {
      console.warn(`\n⚠️  警告: bundle 文件大于 500KB (${sizeKB} KB)`);
      console.warn('   建议检查是否包含了不必要的依赖');
    }

    return true;
  } catch (error) {
    console.error('❌ 打包失败:', error);
    process.exit(1);
  }
}

// 执行打包
buildBundle();
