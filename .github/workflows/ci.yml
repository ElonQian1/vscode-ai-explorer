# AI Explorer - 持续集成
name: CI

on:
  pull_request:
    branches: [master]
  push:
    branches: [master]
  workflow_dispatch:

jobs:
  build-test:
    name: Build & Test
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        node: [18, 20]
      fail-fast: false
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node }}
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: TypeScript compilation
        run: npm run compile

      - name: ESLint check
        run: npm run lint

      - name: Run tests
        run: npm run pretest

      - name: Dependency Architecture Check
        run: |
          echo "🔍 检查依赖架构..."
          if [ -f ".dependency-cruiser.cjs" ]; then
            npx depcruise src --config .dependency-cruiser.cjs --output-type dot > deps.dot
            echo "✅ 依赖检查完成"
            
            # 生成依赖图 (仅在 Ubuntu 上)
            if [ "${{ matrix.os }}" == "ubuntu-latest" ] && command -v dot >/dev/null 2>&1; then
              apt-get update && apt-get install -y graphviz || true
              dot -Tsvg deps.dot > deps.svg
              echo "📊 依赖图已生成"
            fi
          else
            echo "⚠️ 未找到 .dependency-cruiser.cjs，跳过依赖检查"
          fi
        shell: bash

      - name: CSP Security Check
        run: |
          echo "🔒 检查 Webview CSP 安全..."
          # 检查是否存在内联脚本（避免 CSP 违规）
          find media webview -name "*.html" -type f 2>/dev/null | while read file; do
            if grep -q '<script[^>]*>[^<]' "$file" 2>/dev/null; then
              echo "❌ 发现内联脚本在 $file，可能违反 CSP 策略"
              exit 1
            fi
          done || echo "✅ 未发现内联脚本违规"
        shell: bash

      - name: Package VSIX
        run: |
          echo "📦 打包 VS Code 扩展..."
          npx vsce package --no-dependencies
          echo "✅ VSIX 打包完成"

      - name: Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-${{ matrix.os }}-node${{ matrix.node }}
          path: |
            *.vsix
            deps.*
            out/**
          retention-days: 7

  # 依赖图评论到 PR（仅在 PR 事件且 Ubuntu 环境）
  comment-dependencies:
    name: Comment Dependencies
    if: github.event_name == 'pull_request'
    runs-on: ubuntu-latest
    needs: build-test
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          name: build-ubuntu-latest-node20
          path: ./artifacts

      - name: Comment PR with dependency info
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: dependency-info
          message: |
            ## 🏗️ 构建信息
            
            ✅ **构建状态**: 成功完成
            📦 **VSIX 包**: 已生成，见构建工件
            📊 **依赖图**: `deps.svg` (如有生成)
            
            ### 🔍 检查项目
            - ✅ TypeScript 编译
            - ✅ ESLint 代码规范 
            - ✅ 单元测试
            - ✅ 依赖架构检查
            - ✅ CSP 安全检查
            - ✅ VSIX 打包

            _此评论由 GitHub Actions 自动生成_