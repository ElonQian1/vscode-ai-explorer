// src/features/explorer-alias/panel/DetailedAnalysisPanel.ts
/**
 * üîç ËØ¶ÁªÜÂàÜÊûêÈù¢Êùø
 * ‰∏∫ÈùûÊäÄÊúØÁî®Êà∑ÂíåAI‰ª£ÁêÜÊèê‰æõ‰∏∞ÂØåÁöÑÊñá‰ª∂ÂàÜÊûê‰ø°ÊÅØ
 */

import * as vscode from 'vscode';
import { HoverInfoService } from '../ui/HoverInfoService';

export class DetailedAnalysisPanel {
    public static currentPanel: DetailedAnalysisPanel | undefined;
    private readonly _panel: vscode.WebviewPanel;
    private readonly _extensionUri: vscode.Uri;
    private _disposables: vscode.Disposable[] = [];

    public static createOrShow(extensionUri: vscode.Uri, filePath: string) {
        const column = vscode.window.activeTextEditor
            ? vscode.window.activeTextEditor.viewColumn
            : undefined;

        // Â¶ÇÊûúÈù¢ÊùøÂ∑≤Â≠òÂú®ÔºåÊòæÁ§∫ÂÆÉ
        if (DetailedAnalysisPanel.currentPanel) {
            DetailedAnalysisPanel.currentPanel._panel.reveal(column);
            DetailedAnalysisPanel.currentPanel._updateForFile(filePath);
            return;
        }

        // ÂàõÂª∫Êñ∞Èù¢Êùø
        const panel = vscode.window.createWebviewPanel(
            'aiExplorerDetailedAnalysis',
            'üîç AI Explorer - ËØ¶ÁªÜÂàÜÊûê',
            column || vscode.ViewColumn.One,
            {
                enableScripts: true,
                retainContextWhenHidden: true,
                localResourceRoots: [
                    vscode.Uri.joinPath(extensionUri, 'media')
                ]
            }
        );

        DetailedAnalysisPanel.currentPanel = new DetailedAnalysisPanel(panel, extensionUri);
        DetailedAnalysisPanel.currentPanel._updateForFile(filePath);
    }

    private constructor(panel: vscode.WebviewPanel, extensionUri: vscode.Uri) {
        this._panel = panel;
        this._extensionUri = extensionUri;

        // ËÆæÁΩÆÂàùÂßãÂÜÖÂÆπ
        this._update();

        // ÁõëÂê¨Èù¢ÊùøÂÖ≥Èó≠‰∫ã‰ª∂
        this._panel.onDidDispose(() => this.dispose(), null, this._disposables);

        // Â§ÑÁêÜÊù•Ëá™webviewÁöÑÊ∂àÊÅØ
        this._panel.webview.onDidReceiveMessage(
            message => {
                switch (message.command) {
                    case 'openFile':
                        vscode.commands.executeCommand('vscode.open', vscode.Uri.file(message.path));
                        return;
                    case 'analyzeRelated':
                        this._analyzeRelatedFile(message.path);
                        return;
                }
            },
            null,
            this._disposables
        );
    }

    private async _updateForFile(filePath: string) {
        try {
            const workspaceRoot = vscode.workspace.workspaceFolders?.[0]?.uri.fsPath;
            if (!workspaceRoot) return;

            const hoverService = HoverInfoService.getInstance(workspaceRoot);
            const analysis = await hoverService.getExistingTooltip(filePath);
            
            this._panel.webview.html = this._getHtmlForWebview(filePath, analysis);
        } catch (error) {
            console.error('Êõ¥Êñ∞ÂàÜÊûêÈù¢ÊùøÂ§±Ë¥•:', error);
        }
    }

    private async _analyzeRelatedFile(filePath: string) {
        // ÂàÜÊûêÁõ∏ÂÖ≥Êñá‰ª∂Âπ∂Êõ¥Êñ∞Èù¢Êùø
        this._updateForFile(filePath);
    }

    private _update() {
        this._panel.webview.html = this._getHtmlForWebview();
    }

    private _getHtmlForWebview(filePath?: string, analysis?: string | null): string {
        const webview = this._panel.webview;

        return `
<!DOCTYPE html>
<html lang="zh-CN">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>AI Explorer - ËØ¶ÁªÜÂàÜÊûê</title>
    <style>
        body {
            font-family: var(--vscode-font-family);
            padding: 20px;
            color: var(--vscode-foreground);
            background: var(--vscode-editor-background);
            line-height: 1.6;
        }
        .container {
            max-width: 800px;
            margin: 0 auto;
        }
        .header {
            text-align: center;
            margin-bottom: 30px;
            padding: 20px;
            background: var(--vscode-editor-inlayHint-background);
            border-radius: 8px;
        }
        .section {
            margin: 20px 0;
            padding: 15px;
            background: var(--vscode-input-background);
            border-radius: 6px;
            border-left: 4px solid var(--vscode-button-background);
        }
        .info-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 15px;
            margin: 15px 0;
        }
        .info-card {
            padding: 12px;
            background: var(--vscode-badge-background);
            border-radius: 4px;
        }
        .file-path {
            font-family: var(--vscode-editor-font-family);
            background: var(--vscode-textCodeBlock-background);
            padding: 8px 12px;
            border-radius: 4px;
            word-break: break-all;
        }
        .tips {
            background: var(--vscode-inputValidation-infoBackground);
            border-left: 4px solid var(--vscode-inputValidation-infoBorder);
            padding: 12px;
            margin: 10px 0;
            border-radius: 0 4px 4px 0;
        }
        .loading {
            text-align: center;
            color: var(--vscode-descriptionForeground);
            padding: 40px;
        }
        button {
            background: var(--vscode-button-background);
            color: var(--vscode-button-foreground);
            border: none;
            padding: 8px 16px;
            border-radius: 4px;
            cursor: pointer;
            margin: 5px;
        }
        button:hover {
            background: var(--vscode-button-hoverBackground);
        }
        .related-files {
            display: flex;
            flex-wrap: wrap;
            gap: 8px;
            margin-top: 10px;
        }
        .related-file {
            background: var(--vscode-badge-background);
            color: var(--vscode-badge-foreground);
            padding: 4px 8px;
            border-radius: 4px;
            cursor: pointer;
            font-size: 0.9em;
        }
        .related-file:hover {
            opacity: 0.8;
        }
        
        /* Tab Ê†∑Âºè */
        .tab-container {
            margin: 20px 0;
        }
        .tab-buttons {
            display: flex;
            background: var(--vscode-tab-inactiveBackground);
            border-radius: 6px 6px 0 0;
            overflow: hidden;
        }
        .tab-button {
            background: var(--vscode-tab-inactiveBackground);
            color: var(--vscode-tab-inactiveForeground);
            border: none;
            padding: 12px 20px;
            cursor: pointer;
            border-bottom: 3px solid transparent;
            transition: all 0.2s;
            flex: 1;
            text-align: center;
        }
        .tab-button:hover {
            background: var(--vscode-tab-hoverBackground);
        }
        .tab-button.active {
            background: var(--vscode-tab-activeBackground);
            color: var(--vscode-tab-activeForeground);
            border-bottom-color: var(--vscode-button-background);
        }
        .tab-content {
            display: none;
            background: var(--vscode-input-background);
            padding: 20px;
            border-radius: 0 0 6px 6px;
            border-top: 1px solid var(--vscode-widget-border);
        }
        .tab-content.active {
            display: block;
        }
        
        /* Ê†∏ÂøÉÂäüËÉΩÊ†∑Âºè */
        .core-function {
            margin: 15px 0;
            padding: 15px;
            background: var(--vscode-editor-inlayHint-background);
            border-radius: 6px;
            border-left: 4px solid var(--vscode-button-background);
        }
        .core-function h4 {
            margin: 0 0 10px 0;
            color: var(--vscode-button-background);
        }
        .core-function ul {
            margin: 10px 0;
            padding-left: 20px;
        }
        .core-function li {
            margin: 8px 0;
            line-height: 1.5;
        }
        .scenario-list {
            background: var(--vscode-badge-background);
            padding: 12px;
            border-radius: 4px;
            margin: 10px 0;
        }
    </style>
</head>
<body>
    <div class="container">
        ${filePath ? this._generateAnalysisHtml(filePath, analysis || null) : this._generateWelcomeHtml()}
    </div>

    <script>
        const vscode = acquireVsCodeApi();
        
        function openFile(path) {
            vscode.postMessage({
                command: 'openFile',
                path: path
            });
        }
        
        function analyzeRelated(path) {
            vscode.postMessage({
                command: 'analyzeRelated',
                path: path
            });
        }
        
        // Tab ÂàáÊç¢ÂäüËÉΩ
        function showTab(tabName) {
            // ÈöêËóèÊâÄÊúâtabÂÜÖÂÆπ
            const tabContents = document.querySelectorAll('.tab-content');
            tabContents.forEach(content => content.classList.remove('active'));
            
            // ÁßªÈô§ÊâÄÊúâtabÊåâÈíÆÁöÑactiveÁ±ª
            const tabButtons = document.querySelectorAll('.tab-button');
            tabButtons.forEach(button => button.classList.remove('active'));
            
            // ÊòæÁ§∫ÈÄâ‰∏≠ÁöÑtabÂÜÖÂÆπ
            const activeContent = document.getElementById(tabName + '-content');
            if (activeContent) {
                activeContent.classList.add('active');
            }
            
            // ÊøÄÊ¥ªÈÄâ‰∏≠ÁöÑtabÊåâÈíÆ
            const activeButton = document.querySelector(\`[onclick="showTab('\${tabName}')"]\`);
            if (activeButton) {
                activeButton.classList.add('active');
            }
        }
        
        // È°µÈù¢Âä†ËΩΩÂÆåÊàêÂêéÊøÄÊ¥ªÁ¨¨‰∏Ä‰∏™tab
        document.addEventListener('DOMContentLoaded', function() {
            showTab('overview');
        });
    </script>
</body>
</html>`;
    }

    private _generateWelcomeHtml(): string {
        return `
        <div class="header">
            <h1>üîç AI Explorer - ËØ¶ÁªÜÂàÜÊûê</h1>
            <p>‰∏∫ÊÇ®Êèê‰æõÊñá‰ª∂ÁöÑÊ∑±Â∫¶ÂàÜÊûêÂíåÈÄö‰øóËß£Èáä</p>
        </div>
        <div class="section">
            <h2>üöÄ Â¶Ç‰Ωï‰ΩøÁî®</h2>
            <p>Âú® AI Explorer Ê†ëËßÜÂõæ‰∏≠Âè≥ÈîÆÁÇπÂáª‰ªª‰ΩïÊñá‰ª∂ÔºåÈÄâÊã© <strong>"Êü•ÁúãËØ¶ÁªÜÂàÜÊûê"</strong> Âç≥ÂèØÊü•ÁúãËØ•Êñá‰ª∂ÁöÑËØ¶ÁªÜ‰ø°ÊÅØ„ÄÇ</p>
        </div>
        <div class="tips">
            <p><strong>üí° ÊèêÁ§∫Ôºö</strong>Ëøô‰∏™Èù¢Êùø‰∏ì‰∏∫ÈùûÊäÄÊúØÁî®Êà∑ËÆæËÆ°ÔºåÁî®ÈÄö‰øóÊòìÊáÇÁöÑËØ≠Ë®ÄËß£Èáä‰ª£Á†ÅÊñá‰ª∂ÁöÑ‰ΩúÁî®„ÄÇ</p>
        </div>`;
    }

    private _generateAnalysisHtml(filePath: string, analysis: string | null): string {
        const fileName = filePath.split(/[/\\]/).pop() || 'unknown';
        
        if (!analysis) {
            return `
            <div class="header">
                <h1>üìÅ ${fileName}</h1>
                <div class="file-path">${filePath}</div>
            </div>
            <div class="loading">
                <p>‚è≥ Ê≠£Âú®ÂàÜÊûêÊñá‰ª∂ÔºåËØ∑Á®çÂÄô...</p>
                <button onclick="location.reload()">üîÑ Âà∑Êñ∞</button>
            </div>`;
        }

        // ÁîüÊàêÊ†∏ÂøÉÂäüËÉΩÂÜÖÂÆπ
        const coreFunctionsContent = this._generateCoreFunctionsContent(fileName, filePath);
        
        return `
        <div class="header">
            <h1>üìÅ ${fileName}</h1>
            <div class="file-path">${filePath}</div>
        </div>
        
        <div class="tab-container">
            <div class="tab-buttons">
                <button class="tab-button active" onclick="showTab('overview')">üìä Ê¶ÇËßà</button>
                <button class="tab-button" onclick="showTab('core-functions')">üîß Ê†∏ÂøÉÂäüËÉΩ</button>
                <button class="tab-button" onclick="showTab('technical')">‚öôÔ∏è ÊäÄÊúØËØ¶ÊÉÖ</button>
            </div>
            
            <div id="overview-content" class="tab-content active">
                <div class="section">
                    <h2>üéØ Êñá‰ª∂ÂàÜÊûêÁªìÊûú</h2>
                    <div style="white-space: pre-line;">${analysis}</div>
                </div>
                <div class="section">
                    <h2>üõ†Ô∏è Êìç‰ΩúÈÄâÈ°π</h2>
                    <button onclick="openFile('${filePath}')">üìù ÊâìÂºÄÊñá‰ª∂</button>
                    <button onclick="location.reload()">üîÑ ÈáçÊñ∞ÂàÜÊûê</button>
                </div>
                <div class="tips">
                    <p><strong>üí° ‰∏ì‰∏öÊèêÁ§∫Ôºö</strong>Â¶ÇÊûúÊÇ®ÊòØÂºÄÂèëËÄÖÔºåÂèØ‰ª•ÈÄöËøáÂè≥ÈîÆËèúÂçïËøõË°åÊõ¥Ê∑±ÂÖ•ÁöÑ‰ª£Á†ÅÂàÜÊûê„ÄÇ</p>
                </div>
            </div>
            
            <div id="core-functions-content" class="tab-content">
                ${coreFunctionsContent}
            </div>
            
            <div id="technical-content" class="tab-content">
                <div class="section">
                    <h2>‚öôÔ∏è ÊäÄÊúØËØ¶ÊÉÖ</h2>
                    <p>ËøôÈáåÊòæÁ§∫ÊäÄÊúØÂÆûÁé∞ÁªÜËäÇ„ÄÅAPIÊñáÊ°£„ÄÅ‰ª£Á†ÅÁªìÊûÑÁ≠â‰ø°ÊÅØ„ÄÇ</p>
                    <div style="white-space: pre-line;">${analysis}</div>
                </div>
            </div>
        </div>`;
    }

    /**
     * üîß ÁîüÊàêÊ†∏ÂøÉÂäüËÉΩÂÜÖÂÆπ - ‰ªéAIÂàÜÊûêÁªìÊûúËé∑Âèñ
     */
    private _generateCoreFunctionsContent(fileName: string, filePath: string): string {
        // üöÄ ÊòæÁ§∫AIÂàÜÊûêËøõË°å‰∏≠ÁöÑÁä∂ÊÄÅÔºåÁúüÊ≠£ÁöÑÂÜÖÂÆπÂ∞ÜÈÄöËøátooltipÊòæÁ§∫
        return this._generateAIAnalysisCoreFunctions(fileName, filePath);
    }

    /**
     * ü§ñ ÁîüÊàêAIÂàÜÊûêÁöÑÊ†∏ÂøÉÂäüËÉΩÂÜÖÂÆπ
     */
    private _generateAIAnalysisCoreFunctions(fileName: string, filePath: string): string {
        return `
        <h2>üéØ ${fileName} Ê†∏ÂøÉÂäüËÉΩ</h2>
        
        <div class="core-function">
            <h4>ü§ñ AIÊô∫ËÉΩÂàÜÊûê</h4>
            <p>Ê≠§È°µÈù¢ÁöÑÊ†∏ÂøÉÂäüËÉΩÂÜÖÂÆπÁî±AIÊô∫ËÉΩÂàÜÊûêÁîüÊàêÔºå‰∏∫ÊÇ®Êèê‰æõÔºö</p>
            <ul>
                <li>üéØ <strong>ÂäüËÉΩÊ¶ÇËø∞</strong> - Êñá‰ª∂ÁöÑ‰∏ªË¶ÅÁî®ÈÄîÂíå‰ª∑ÂÄº</li>
                <li>üîß <strong>Ê†∏ÂøÉËÉΩÂäõ</strong> - ÂÖ∑‰ΩìÁöÑÂäüËÉΩÊ∏ÖÂçïÂíåÁâπÊÄß</li>
                <li>üíº <strong>‰∏öÂä°ÂΩ±Âìç</strong> - ÂØπÈ°πÁõÆÁöÑÈáçË¶ÅÊÄßÂíåÂΩ±Âìç</li>
                <li>üîå <strong>ÊäÄÊúØÊû∂ÊûÑ</strong> - APIÊé•Âè£ÂíåËÆæËÆ°Ê®°Âºè</li>
            </ul>
        </div>

        <div class="core-function">
            <h4>‚ö° Êô∫ËÉΩÂàÜÊûêÁâπËâ≤</h4>
            <p>‰∏éÁ°¨ÁºñÁ†ÅÂÜÖÂÆπ‰∏çÂêåÔºåAIÂàÜÊûêËÉΩÂ§üÔºö</p>
            <ul>
                <li>üìö <strong>Ê∑±Â∫¶ÁêÜËß£‰ª£Á†Å</strong> - ÂàÜÊûêÂÆûÈôÖÁöÑ‰ª£Á†ÅÈÄªËæëÂíåÁªìÊûÑ</li>
                <li>üîç <strong>Ëá™Âä®ËØÜÂà´Ê®°Âºè</strong> - Ê£ÄÊµãËÆæËÆ°Ê®°ÂºèÂíåÊû∂ÊûÑÈ£éÊ†º</li>
                <li>üé® <strong>ÁîüÊàêÈÄö‰øóËß£Èáä</strong> - ‰∏∫ÈùûÊäÄÊúØÁî®Êà∑Êèê‰æõÊòìÊáÇÁöÑÊèèËø∞</li>
                <li>üöÄ <strong>ÂÆûÊó∂Êõ¥Êñ∞</strong> - Èöè‰ª£Á†ÅÂèòÂåñËá™Âä®Êõ¥Êñ∞ÂàÜÊûêÁªìÊûú</li>
            </ul>
        </div>

        <div class="core-function">
            <h4>üî¨ ÂΩìÂâçÂàÜÊûêÁä∂ÊÄÅ</h4>
            <p>Ê≠£Âú®ÂØπ <code>${fileName}</code> ËøõË°åÊ∑±Â∫¶ÂàÜÊûê...</p>
            <p>AIÂàÜÊûêÂÆåÊàêÂêéÔºåÊÇ®Â∞ÜÂú®‰ª•‰∏ã‰ΩçÁΩÆÁúãÂà∞ËØ¶ÁªÜÁöÑÊ†∏ÂøÉÂäüËÉΩÊèèËø∞Ôºö</p>
            <ul>
                <li>üîç <strong>Êñá‰ª∂ÊÇ¨ÂÅúÊèêÁ§∫</strong> - Âú®AI ExplorerÊ†ëËßÜÂõæ‰∏≠ÊÇ¨ÂÅúÊü•Áúã</li>
                <li>üìä <strong>Ê¶ÇËßàTabÈ°µ</strong> - ÂåÖÂê´ÂÆåÊï¥ÁöÑÂàÜÊûêÁªìÊûú</li>
                <li>‚öôÔ∏è <strong>ÊäÄÊúØËØ¶ÊÉÖTabÈ°µ</strong> - ÊäÄÊúØÂÆûÁé∞ÁªÜËäÇ</li>
            </ul>
            
            <p style="margin-top: 20px;">
                <button onclick="location.reload()">üîÑ Âà∑Êñ∞Êü•ÁúãÊúÄÊñ∞ÂàÜÊûê</button>
                <button onclick="vscode.postMessage({command: 'analyzeFile', path: '${filePath}'})">ü§ñ ÈáçÊñ∞AIÂàÜÊûê</button>
            </p>
        </div>

        <div class="tips">
            <p><strong>üí° ÊèêÁ§∫Ôºö</strong>AIÂàÜÊûêÈúÄË¶ÅË∞ÉÁî®OpenAI APIÔºåËØ∑Á°Æ‰øùÂ∑≤Âú®ËÆæÁΩÆ‰∏≠ÈÖçÁΩÆ‰∫ÜAPI Key„ÄÇÂàÜÊûêÁªìÊûú‰ºöËá™Âä®ÁºìÂ≠òÔºåÈÅøÂÖçÈáçÂ§çË∞ÉÁî®„ÄÇ</p>
        </div>`;
    }

    /**
     * ü§ñ ‰ªéAIÂàÜÊûêÁªìÊûúÊûÑÂª∫Ê†∏ÂøÉÂäüËÉΩÂÜÖÂÆπ
     */
    private _buildCoreFunctionsFromAI(result: any, fileName: string): string {
        let content = `<h2>üéØ ${fileName} Ê†∏ÂøÉÂäüËÉΩ</h2>`;
        
        // Áî®Êà∑ÂèãÂ•ΩÁöÑËß£Èáä
        if (result.userFriendlyExplanation) {
            content += `<div class="core-function">
                <h4>üìù ÂäüËÉΩÊ¶ÇËø∞</h4>
                <p>${result.userFriendlyExplanation}</p>
            </div>`;
        }
        
        // È°πÁõÆËßíËâ≤
        if (result.projectRole) {
            content += `<div class="core-function">
                <h4>üé≠ È°πÁõÆËßíËâ≤</h4>
                <p>${result.projectRole}</p>
            </div>`;
        }
        
        // Ê†∏ÂøÉÂäüËÉΩÊ∏ÖÂçïÔºà‰ªétooltipÁöÑbuildCoreFunctionsSectionËé∑ÂèñÔºâ
        if (result.purpose) {
            const functions = this._extractCoreFunctionsFromPurpose(result.purpose, fileName);
            if (functions.length > 0) {
                content += `<div class="core-function">
                    <h4>üîß ‰∏ªË¶ÅÂäüËÉΩ</h4>
                    <ul>`;
                functions.forEach(func => {
                    content += `<li>${func}</li>`;
                });
                content += `</ul>
                </div>`;
            }
        }
        
        // ‰∏öÂä°ÂΩ±Âìç
        if (result.businessImpact) {
            const impact = result.businessImpact;
            content += `<div class="core-function">
                <h4>üíº ‰∏öÂä°ÂΩ±Âìç</h4>
                <p><strong>È£éÈô©Á≠âÁ∫ß:</strong> ${impact.riskLevel}</p>`;
            if (impact.affectedAreas && impact.affectedAreas.length > 0) {
                content += `<p><strong>ÂΩ±ÂìçÂå∫Âüü:</strong> ${impact.affectedAreas.join(', ')}</p>`;
            }
            if (impact.modificationGuidance) {
                content += `<p><strong>‰øÆÊîπÂª∫ËÆÆ:</strong> ${impact.modificationGuidance}</p>`;
            }
            content += `</div>`;
        }
        
        // MCP‰ø°ÊÅØ
        if (result.mcpInfo) {
            const mcp = result.mcpInfo;
            content += `<div class="core-function">
                <h4>üîå MCP‰ª£ÁêÜ‰ø°ÊÅØ</h4>`;
            if (mcp.apiSurface && mcp.apiSurface.length > 0) {
                content += `<p><strong>APIÊé•Âè£:</strong> ${mcp.apiSurface.slice(0, 3).join(', ')}</p>`;
            }
            if (mcp.keyInterfaces && mcp.keyInterfaces.length > 0) {
                content += `<p><strong>ÂÖ≥ÈîÆÊé•Âè£:</strong> ${mcp.keyInterfaces.slice(0, 2).join(', ')}</p>`;
            }
            content += `</div>`;
        }
        
        // Â¶ÇÊûúÊ≤°ÊúâËØ¶ÁªÜ‰ø°ÊÅØÔºåÊòæÁ§∫Âü∫Á°Ä‰ø°ÊÅØ
        if (!result.userFriendlyExplanation && !result.projectRole) {
            content += `<div class="core-function">
                <h4>üìã Âü∫Êú¨‰ø°ÊÅØ</h4>
                <p>${result.purpose || 'Êñá‰ª∂ÂäüËÉΩÂàÜÊûê‰∏≠...'}</p>
                <p><strong>ÈáçË¶ÅÁ®ãÂ∫¶:</strong> ${result.importance || 5}/10</p>
                <p><strong>ÊäÄÊúØÊ†áÁ≠æ:</strong> ${(result.tags || []).join(', ')}</p>
            </div>`;
        }
        
        return content;
    }

    /**
     * ‚è≥ ÁîüÊàêÂä†ËΩΩ‰∏≠ÁöÑÊ†∏ÂøÉÂäüËÉΩÂÜÖÂÆπ
     */
    private _generateLoadingCoreFunctions(fileName: string): string {
        return `
        <h2>üéØ ${fileName} Ê†∏ÂøÉÂäüËÉΩ</h2>
        <div class="core-function">
            <h4>‚è≥ AIÂàÜÊûê‰∏≠...</h4>
            <p>Ê≠£Âú®‰ΩøÁî®AIÊ∑±Â∫¶ÂàÜÊûêÊ≠§Êñá‰ª∂ÁöÑÊ†∏ÂøÉÂäüËÉΩÔºåËØ∑Á®çÂÄôÁâáÂàª„ÄÇ</p>
            <p>AIÂ∞ÜÂàÜÊûêÊñá‰ª∂ÁöÑ:</p>
            <ul>
                <li>üéØ ‰∏ªË¶ÅÂäüËÉΩÂíåÁî®ÈÄî</li>
                <li>üîß Ê†∏ÂøÉËÉΩÂäõÊ∏ÖÂçï</li>
                <li>üíº ‰∏öÂä°‰ª∑ÂÄºÂíåÂΩ±Âìç</li>
                <li>üîå ÊäÄÊúØÊû∂ÊûÑ‰ø°ÊÅØ</li>
            </ul>
            <p><button onclick="location.reload()">üîÑ Âà∑Êñ∞Ëé∑ÂèñÂàÜÊûêÁªìÊûú</button></p>
        </div>`;
    }

    /**
     * üîç ‰ªéÁî®ÈÄîÊèèËø∞‰∏≠ÊèêÂèñÊ†∏ÂøÉÂäüËÉΩ
     */
    private _extractCoreFunctionsFromPurpose(purpose: string, fileName: string): string[] {
        // ËøôÈáåÂ§çÁî®HoverInfoService‰∏≠ÁöÑÈÄªËæë
        const functions: string[] = [];
        const lowerPurpose = purpose.toLowerCase();
        const lowerFileName = fileName.toLowerCase();
        
        // Âü∫‰∫éÂÖ≥ÈîÆËØçÊèêÂèñÂäüËÉΩ
        if (lowerPurpose.includes('ai') || lowerPurpose.includes('client')) {
            functions.push('ü§ñ AIÊúçÂä°Ë∞ÉÁî®ÂíåÁÆ°ÁêÜ');
            functions.push('üîÑ ËØ∑Ê±ÇÂ§ÑÁêÜÂíåÂìçÂ∫îÁÆ°ÁêÜ');
            if (lowerPurpose.includes('multi') || lowerPurpose.includes('provider')) {
                functions.push('üîÄ Â§öÊèê‰æõÂïÜÊîØÊåÅÂíåÊïÖÈöúËΩ¨Áßª');
            }
        }
        
        if (lowerPurpose.includes('translate')) {
            functions.push('üåê ÊñáÊú¨ÁøªËØëÊúçÂä°');
            functions.push('üì¶ ÊâπÈáèÁøªËØëÂ§ÑÁêÜ');
        }
        
        if (lowerPurpose.includes('analyze') || lowerPurpose.includes('analysis')) {
            functions.push('üîç Êô∫ËÉΩÊñá‰ª∂ÂàÜÊûê');
            functions.push('üìä Â§çÊùÇÂ∫¶ÂíåÈáçË¶ÅÊÄßËØÑ‰º∞');
        }
        
        if (lowerPurpose.includes('cache')) {
            functions.push('üíæ Êï∞ÊçÆÁºìÂ≠òÂíåÂ≠òÂÇ®');
            functions.push('‚ö° Âø´ÈÄüÊï∞ÊçÆÊ£ÄÁ¥¢');
        }
        
        return functions;
    }

    /**
     * üìä Ëé∑ÂèñAIÂàÜÊûêÁªìÊûú (È¢ÑÁïôÊé•Âè£)
     */
    public dispose() {
        DetailedAnalysisPanel.currentPanel = undefined;

        // Ê∏ÖÁêÜËµÑÊ∫ê
        this._panel.dispose();

        while (this._disposables.length) {
            const x = this._disposables.pop();
            if (x) {
                x.dispose();
            }
        }
    }
}

        <div class="core-function">
            <h4>1. Â§öÊèê‰æõÂïÜÊîØÊåÅÂíåÂàáÊç¢</h4>
            <ul>
                <li>ÊîØÊåÅ OpenAI ÂíåËÖæËÆØ‰∫ëÊ∑∑ÂÖÉÔºàHunyuanÔºâ‰Ωú‰∏∫ AI ÊúçÂä°Êèê‰æõÂïÜÔºå‰ΩøÁî®ÂÖºÂÆπÁöÑ OpenAI Êé•Âè£ÔºàÈÄöËøáÂàáÊç¢ baseURL Âíå apiKeyÔºâ</li>
                <li>Ëá™Âä®Âä†ËΩΩÈÖçÁΩÆÔºö‰ªé VS Code ÈÖçÁΩÆ‰∏≠ËØªÂèñ API Key Âíå Base URLÔºåÂ¶ÇÊûú‰∏ªÊèê‰æõÂïÜÊú™ÈÖçÁΩÆÊàñ‰∏çÂèØÁî®Ôºå‰ºöÊô∫ËÉΩÂàáÊç¢Âà∞Âè¶‰∏Ä‰∏™Â∑≤ÈÖçÁΩÆÁöÑÊèê‰æõÂïÜÔºåÂπ∂Êõ¥Êñ∞ÈÖçÁΩÆ</li>
                <li>ÊïÖÈöúËΩ¨ÁßªÔºöÂ¶ÇÊûú‰∏ªÊèê‰æõÂïÜËØ∑Ê±ÇÂ§±Ë¥•Ôºå‰ºöÂ∞ùËØïÂ§áÁî®Êèê‰æõÂïÜÔºõÂ¶ÇÊûúÈÉΩÂ§±Ë¥•Ôºå‰ºöÊäõÂá∫ËØ¶ÁªÜÈîôËØØ‰ø°ÊÅØÂπ∂ÊèêÁ§∫Ëß£ÂÜ≥ÊñπÊ°à</li>
            </ul>
        </div>

        <div class="core-function">
            <h4>2. ÂèëÈÄÅ AI ËØ∑Ê±Ç</h4>
            <ul>
                <li>ÈÄöËøá <code>sendRequest</code> ÊñπÊ≥ïÂèëÈÄÅ AI ËØ∑Ê±ÇÔºà‰æãÂ¶ÇÁøªËØëÊàñÁîüÊàêÊñáÊú¨ÔºâÔºåÊîØÊåÅÊèêÁ§∫ËØçÔºàpromptÔºâ„ÄÅÊúÄÂ§ß token Êï∞ÂíåÊ∏©Â∫¶ÂèÇÊï∞</li>
                <li>ÂÜÖÁΩÆÈáçËØïÊú∫Âà∂ÔºöÊúÄÂ§öÈáçËØï 3 Ê¨°ÔºåÂ§ÑÁêÜÂ¶ÇÈÄüÁéáÈôêÂà∂Ôºà429 ÈîôËØØÔºâÁ≠âÈóÆÈ¢òÔºå‰ΩøÁî®ÊåáÊï∞ÈÄÄÈÅøÂª∂Ëøü</li>
                <li>ËøîÂõûÂìçÂ∫îÂåÖÊã¨ÂÜÖÂÆπ„ÄÅÊ®°Âûã‰ø°ÊÅØÂíå token ‰ΩøÁî®ÁªüËÆ°</li>
            </ul>
        </div>

        <div class="core-function">
            <h4>3. ÊâπÈáèÁøªËØë</h4>
            <ul>
                <li><code>translateBatch</code> ÊñπÊ≥ïÁî®‰∫éÊâπÈáèÂ§ÑÁêÜÂ§ö‰∏™ÊñáÊú¨Ôºà‰æãÂ¶ÇËã±ÊñáËØçÊ±áÁøªËØëÊàê‰∏≠ÊñáÔºâ</li>
                <li>ÂàÜÊâπÂ§ÑÁêÜÔºàÊØèÊâπ 10 ‰∏™ÔºâÔºåÁîüÊàêÊâπÈáèÊèêÁ§∫ËØçÔºåËß£ÊûêÂìçÂ∫îÁªìÊûú</li>
                <li>Â¶ÇÊûúÊâπÈáèÂ§±Ë¥•Ôºå‰ºö fallback Âà∞Âçï‰∏™ÁøªËØëÔºåÂπ∂Ê∑ªÂä†Âª∂Ëøü‰ª•ÈÅøÂÖçÈÄüÁéáÈôêÂà∂</li>
            </ul>
        </div>

        <div class="core-function">
            <h4>4. ÂÅ•Â∫∑Ê£ÄÊü•ÂíåÁõëÊéß</h4>
            <ul>
                <li>ÂÆöÊúüÔºàÊØè 5 ÂàÜÈíüÔºâÊ£ÄÊü•Êèê‰æõÂïÜÂèØÁî®ÊÄßÔºåÈÄöËøáÂèëÈÄÅÊµãËØïËØ∑Ê±ÇÈ™åËØÅ</li>
                <li>ËÆ∞ÂΩïÊèê‰æõÂïÜÁä∂ÊÄÅÔºåÂåÖÊã¨ÂèØÁî®ÊÄßÂíåÊúÄÂêéÈîôËØØ‰ø°ÊÅØ</li>
                <li>ÈÄöËøá <code>getProviderStatus</code> ÊñπÊ≥ïËé∑ÂèñÊâÄÊúâÊèê‰æõÂïÜÁöÑÁä∂ÊÄÅ</li>
            </ul>
        </div>

        <div class="core-function">
            <h4>5. ÈÄüÁéáÈôêÂà∂</h4>
            <ul>
                <li>‰∏∫ÊØè‰∏™Êèê‰æõÂïÜÂàõÂª∫Áã¨Á´ãÁöÑ RateLimiterÔºåÈôêÂà∂ËØ∑Ê±ÇÈ¢ëÁéáÔºà‰æãÂ¶Ç Hunyuan 3 Ê¨°/ÂàÜÈíüÔºåOpenAI 5 Ê¨°/ÂàÜÈíüÔºâ</li>
                <li>Âº∫Âà∂Á≠âÂæÖ‰ª•ÈÅøÂÖç API Ë¢´Â∞ÅÁ¶Å</li>
            </ul>
        </div>

        <div class="core-function">
            <h4>6. ËæÖÂä©ÂäüËÉΩ</h4>
            <ul>
                <li>Êó•ÂøóËÆ∞ÂΩïÔºö‰ΩøÁî® Logger ËÆ∞ÂΩïË∞ÉËØï„ÄÅË≠¶ÂëäÂíåÈîôËØØ‰ø°ÊÅØ</li>
                <li>Áî®Êà∑‰∫§‰∫íÔºöÈÄöËøá VS Code API ÊòæÁ§∫ÊèêÁ§∫Ê∂àÊÅØ„ÄÅÊâìÂºÄËÆæÁΩÆÈù¢ÊùøÁ≠â</li>
                <li>Ê®°ÂûãÈÄâÊã©ÔºöÊ†πÊçÆÊèê‰æõÂïÜËá™Âä®ÈÄâÊã©Ê®°ÂûãÔºàÂ¶Ç OpenAI ÈªòËÆ§ gpt-3.5-turboÔºåHunyuan ÈªòËÆ§ hunyuan-turboÔºâ</li>
            </ul>
        </div>

        <div class="scenario-list">
            <h4>üéØ ÈÄÇÁî®Âú∫ÊôØ</h4>
            <ul>
                <li>Ëøô‰∏™Á±ª‰∏ªË¶ÅÁî®‰∫é AI È©±Âä®ÁöÑ VS Code Êâ©Â±ïÔºàÂ¶ÇÁøªËØëÊèí‰ª∂ÔºâÔºå‰æãÂ¶ÇÂú®‰ª£Á†ÅÊé¢Á¥¢ÊàñÊñáÊ°£Â§ÑÁêÜ‰∏≠Ë∞ÉÁî® AI ÊúçÂä°</li>
                <li>ÂÆÉÂº∫Ë∞ÉÈ≤ÅÊ£íÊÄßÔºöÂ§ÑÁêÜÈÖçÁΩÆÁº∫Â§±„ÄÅÁΩëÁªúÈóÆÈ¢ò„ÄÅAPI ÈôêÊµÅÁ≠âÔºåÁ°Æ‰øùÊúçÂä°ÂèØÁî®ÊÄß</li>
                <li>Êû∂ÊûÑËÆæËÆ°ÊîØÊåÅÊâ©Â±ïÊõ¥Â§öÊèê‰æõÂïÜÔºàÂè™ÈúÄÊ∑ªÂä†ÈÖçÁΩÆÂíåÂÆ¢Êà∑Á´ØÔºâ</li>
            </ul>
        </div>

        <div class="tips">
            <p><strong>üí° ÊÄªÁªìÔºö</strong>Ëøô‰∏™Êñá‰ª∂ÂÆûÁé∞‰∫ÜÂèØÈù†ÁöÑ AI ÊúçÂä°ÈõÜÊàêÔºå‰∏ìÊ≥®‰∫éÁøªËØëÂíåÊñáÊú¨ÁîüÊàê‰ªªÂä°ÔºåÈÄÇÂêàÂºÄÂèëËÄÖÂú® VS Code ‰∏≠ÊûÑÂª∫ AI Â¢ûÂº∫Â∑•ÂÖ∑„ÄÇ</p>
        </div>`;
    }

    /**
     * üåê ÁîüÊàêÁøªËØëÂô®Ê†∏ÂøÉÂäüËÉΩÊèèËø∞
     */
    private _generateTranslateCoreFunctions(): string {
        return `
        <h2>üéØ ÁøªËØëÂäüËÉΩÊ†∏ÂøÉ</h2>
        <div class="core-function">
            <h4>1. Êô∫ËÉΩÁøªËØëÂ§ÑÁêÜ</h4>
            <ul>
                <li>Ëã±ÊñáÂà∞‰∏≠ÊñáÁöÑ‰∏ì‰∏öÊúØËØ≠ÁøªËØë</li>
                <li>‰∏ä‰∏ãÊñáÊÑüÁü•ÁöÑÁøªËØë‰ºòÂåñ</li>
                <li>ÊäÄÊúØÊñáÊ°£Âíå‰ª£Á†ÅÊ≥®ÈáäÁøªËØë</li>
            </ul>
        </div>
        
        <div class="core-function">
            <h4>2. ÊâπÈáèÂ§ÑÁêÜËÉΩÂäõ</h4>
            <ul>
                <li>ÊîØÊåÅÂ§ßÈáèÊñáÊú¨ÁöÑÊâπÈáèÁøªËØë</li>
                <li>Êô∫ËÉΩÂàÜÊâπÂ§ÑÁêÜÔºåÈÅøÂÖçAPIÈôêÂà∂</li>
                <li>Â§±Ë¥•ÈáçËØïÂíåÈîôËØØÊÅ¢Â§çÊú∫Âà∂</li>
            </ul>
        </div>`;
    }

    /**
     * üîç ÁîüÊàêÂàÜÊûêÂô®Ê†∏ÂøÉÂäüËÉΩÊèèËø∞
     */
    private _generateAnalyzerCoreFunctions(): string {
        return `
        <h2>üéØ ‰ª£Á†ÅÂàÜÊûêÊ†∏ÂøÉ</h2>
        <div class="core-function">
            <h4>1. Êô∫ËÉΩÊñá‰ª∂ÂàÜÊûê</h4>
            <ul>
                <li>Ëá™Âä®ËØÜÂà´Êñá‰ª∂Á±ªÂûãÂíåÁî®ÈÄî</li>
                <li>ÁîüÊàêÈÄö‰øóÊòìÊáÇÁöÑÂäüËÉΩÊèèËø∞</li>
                <li>ËØÑ‰º∞‰ª£Á†ÅÂ§çÊùÇÂ∫¶ÂíåÈáçË¶ÅÊÄß</li>
            </ul>
        </div>
        
        <div class="core-function">
            <h4>2. ÁªìÊûÑÂåñ‰ø°ÊÅØÊèêÂèñ</h4>
            <ul>
                <li>ÊèêÂèñÁ±ª„ÄÅÊñπÊ≥ï„ÄÅÊé•Âè£Á≠â‰ª£Á†ÅÂÖÉÁ¥†</li>
                <li>ÂàÜÊûê‰æùËµñÂÖ≥Á≥ªÂíåË∞ÉÁî®Èìæ</li>
                <li>ÁîüÊàêÊäÄÊúØÊ†áÁ≠æÂíåÂàÜÁ±ª</li>
            </ul>
        </div>`;
    }

    /**
     * üíæ ÁîüÊàêÁºìÂ≠òÂäüËÉΩÊèèËø∞
     */
    private _generateCacheCoreFunctions(): string {
        return `
        <h2>üéØ ÁºìÂ≠òÁÆ°ÁêÜÊ†∏ÂøÉ</h2>
        <div class="core-function">
            <h4>1. È´òÊïàÊï∞ÊçÆÁºìÂ≠ò</h4>
            <ul>
                <li>ÈîÆÂÄºÂØπÊï∞ÊçÆÂ≠òÂÇ®ÂíåÊ£ÄÁ¥¢</li>
                <li>Ëá™Âä®ËøáÊúüÂíåÊ∏ÖÁêÜÊú∫Âà∂</li>
                <li>ÂÜÖÂ≠ò‰ºòÂåñÂíåÊÄßËÉΩÁõëÊéß</li>
            </ul>
        </div>`;
    }

    /**
     * üìã ÁîüÊàêÈÄöÁî®ÂäüËÉΩÊèèËø∞
     */
    private _generateGenericCoreFunctions(fileName: string): string {
        return `
        <h2>üéØ ${fileName} Ê†∏ÂøÉÂäüËÉΩ</h2>
        <div class="core-function">
            <h4>‰∏ªË¶ÅÂäüËÉΩ</h4>
            <p>Ëøô‰∏™Êñá‰ª∂Êèê‰æõ‰∫ÜÈ°πÁõÆ‰∏≠ÁöÑÈáçË¶ÅÂäüËÉΩÊ®°Âùó„ÄÇÂÖ∑‰ΩìÂäüËÉΩÈúÄË¶ÅÊ†πÊçÆ‰ª£Á†ÅÂÜÖÂÆπËøõË°åÂàÜÊûê„ÄÇ</p>
        </div>
        
        <div class="tips">
            <p><strong>üí° ÊèêÁ§∫Ôºö</strong>Â¶ÇÈúÄ‰∫ÜËß£ËØ¶ÁªÜÂäüËÉΩÔºåËØ∑Êü•ÁúãÊäÄÊúØËØ¶ÊÉÖÊàñÁõ¥Êé•ÈòÖËØªÊ∫ê‰ª£Á†Å„ÄÇ</p>
        </div>`;
    }

    public dispose() {
        DetailedAnalysisPanel.currentPanel = undefined;

        // Ê∏ÖÁêÜËµÑÊ∫ê
        this._panel.dispose();

        while (this._disposables.length) {
            const x = this._disposables.pop();
            if (x) {
                x.dispose();
            }
        }
    }
}